import nltk
from nltk import pos_tag
from nltk.tokenize import word_tokenize
import enum
import string

# Download necessary NLTK data files (only needed once)
nltk.download("averaged_perceptron_tagger_eng")
nltk.download("punkt")


gender_neutral_pronouns = ["they", "them", "their", "theirs"]
verb_map = {
    "is": "are",
    "has": "have",
    "does": "do",
    "was": "were",
    "goes": "go",
    "identifies": "identify",
    "approaches": "approach",
    "marries": "marry",
    "re-attaches": "re-attach",
    "witnesses": "witness",
    "accompanies": "accompany",
    "dismisses": "dismiss",
    "tries": "try",
}

gender_neutral_mapping = {
    "son": "child",
    "Lord": "Noble",
    "Mrs.": "Mx. ",
    "girls": "children",
    "husband": "spouse",
    "Dona": "Noble",
    "brothers": "siblings",
    "marchioness": "noble",
    "Men": "People",
    "sisters": "siblings",
    "clergywoman": "clergy member",
    "Frenchwoman": "French person",
    "King": "Monarch",
    "mother": "parent",
    "servents": "staff",
    "watchwoman": "watcher",
    "girl": "child",
    "Countess": "Noble",
    "brother": "sibling",
    "Mr.": "Mx. ",
    "warlock": "magic practitioner",
    "Warlock": "Magic Practitioner",
    "housekeeper": "house manager",
    "Duchess": "Noble",
    "workwomen": "workers",
    "Queen": "Monarch",
    "Mr": "Mx",
    "boy": "child",
    "half-brother": "half-sibling",
    "headmistress": "head teacher",
    "maid": "domestic worker",
    "uncle": "parent's sibling",
    "miter": "ceremonial headwear",
    "gay": "LGBTQ+",
    "heiress": "heir",
    "himself": "themself",
    "everywoman": "everyone",
    "man": "person",
    "Aunt": "Parent's Sibling",
    "male": "person",
    "priestess": "priest",
    "queens": "monarchs",
    "stepmother": "stepparent",
    "Prince": "Royal",
    "suitresses": "suitors",
    "heroine": "hero",
    "cabwoman": "cab driver",
    "Sister": "Sibling",
    "actor": "performer",
    "Sir": "Noble",
    "husbnd": "spouse",
    "bishopess": "bishop",
    "queen": "monarch",
    "wife": "spouse",
    "Girls": "Children",
    "headmaster": "head teacher",
    "gods": "deities",
    "governor": "leader",
    "schoolmistress": "teacher",
    "charman": "chair",
    "Mrs": "Mx",
    "sister": "sibling",
    "nun": "monastic",
    "grandfather": "grandparent",
    "fiancé": "betrothed",
    "aunt": "parent's sibling",
    "girlish": "childlike",
    "father": "parent",
    "Daughters": "Children",
    "huntress": "hunter",
    "duchess": "noble",
    "coachwoman": "coach driver",
    "widow": "surviving spouse",
    "daughters": "children",
    "husband ": "spouse ",
    "suitress": "suitor",
    "Princess": "Royal",
    "Madam": "Esteemed Person",
    "women": "people",
    "Mister": "Mx",
    "butler": "house manager",
    "girlfriend": "partner",
    "servant": "staff member",
    "Suitresses": "Suitors",
    "daughter": "child",
    "salesboy": "salesperson",
    "Countess ": "Noble ",
    "landlord": "property owner",
    "duke": "noble",
    "washerman": "laundry worker",
    "Monsieur": "Esteemed Person",
    "Monsieur ": "Esteemed Person ",
    "bachelorette": "single person",
    "shr": "they",
    "fatherhood": "parenthood",
    "Uncle": "Parent's Sibling",
    "Madre": "Parent",
    "great-grandmother": "great-grandparent",
    "woodswoman": "forester",
    "grandmother": "grandparent",
    "count": "noble",
    "Governess": "Tutor",
    "woman": "person",
    "Ste.": "St.",
    "Lioness": "Lion",
    "businesswoman": "business person",
    "godesses": "deities",
    "herself": "themself",
    "governor ": "leader ",
    "countess": "noble",
    "lady": "person",
    "saleswoman": "salesperson",
    "gentleman": "person",
    "step-mother": "stepparent",
    "fiancée": "betrothed",
    "heir": "heir",
    "chieftainess": "chief",
    "nephew": "sibling's child",
    "mistress": "partner",
    "niece": "sibling's child",
    "king": "monarch",
    "boys": "children",
    "huntresses": "hunters",
    "maternal": "parental",
}

verb_list = [
    "crosses",
    "dominates",
    "strips",
    "calls",
    "recognizes",
    "grabs",
    "harm",
    "recognizes",
    "confesses",
    "boards",
    "fires",
    "fears",
    "condemn",
    "was",
    "avenge",
    "outrages",
    "identifies",
    "test",
    "tests",
    "wounds",
    "approaches",
    "educates",
    "dazzles",
    "questions",
    "assures",
    "presents",
    "persists",
    "seizes",
    "interviews",
    "hampers",
    "addresses",
    "frame",
    "fire",
    "praises",
    "rallies",
    "like",
    "introduces",
    "scares",
    "greets",
    "arrest",
    "treats",
    "rejects",
    "visits",
    "berates",
    "accosts",
    "attacks",
    "is",
    "aid",
    "convinces",
    "presses",
    "marries",
    "encounters",
    "assault",
    "witnesses",
    "punches",
    "forgives",
    "kills",
    "saves",
    "sells",
    "buys",
    "steals",
    "finds",
    "takes",
    "gives",
    "clasps",
    "returns",
    "re-attaches",
    "waits",
    "rescue",
    "sentences",
    "informs",
    "confronts",
    "away",
    "accompanies",
    "free",
    "exploits",
    "beats",
    "gambles",
    "befriends",
    "intentions",
    "senses",
    "speculates",
    "receives",
    "chastises",
    "heeds",
    "plans",
    "deserves",
    "serves",
    "warns",
    "address",
    "collects",
    "flees",
    "teaches",
    "turns",
    "nurses",
    "starts",
    "learns",
    "thanks",
    "hides",
    "debates",
    "misgivings",
    "tries",
    "drags",
    "overhears",
    "reads",
    "acts",
    "asks",
    "travels",
    "interprets",
    "observes",
    "begs",
    "floats",
    "becomes",
    "sends",
    "frees",
    "accepts",
    "outlines",
    "dives",
    "endows",
    "understands",
    "posts",
    "keeps",
    "points",
    "admires",
    "mills",
    "appoints",
    "reunites",
    "discovers",
    "awakes",
    "contemplates",
    "suspects",
    "hears",
    "decides",
    "pays",
    "gifts",
    "withdraws",
    "rushes",
    "dresses",
    "refuses",
    "lets",
    "aspires",
    "realizes",
    "evades",
    "agrees",
    "transforms",
    "develops",
    "knits",
    "stops",
    "ignores",
    "defends",
    "likes",
    "recommends",
    "ends",
    "promises",
    "experiences",
    "settles",
    "rides",
    "aids",
    "stays",
    "invites",
    "sustains",
    "looks",
    "runs",
    "marvels",
    "searches",
    "belongs",
    "scolds",
    "throws",
    "threatens",
    "resumes",
    "suggests",
    "portrays",
    "practices",
    "admits",
    "watches",
    "assumes",
    "chooses",
    "needs",
    "thinks",
    "laments",
    "avoids",
    "awaits",
    "regains",
    "attempts",
    "writes",
    "resorts",
    "trades",
    "considers",
    "knows",
    "emerges",
    "brings",
    "advances",
    "declines",
    "teases",
    "reminds",
    "apologizes",
    "adores",
    "seeks",
    "passes",
    "sheds",
    "tastes",
    "draws",
    "employs",
    "remains",
    "resolves",
    "strikes",
    "forms",
    "suffers",
    "manages",
    "jumps",
    "leaves",
    "arranges",
    "meets",
    "joins",
    "maintains",
    "prevails",
    "lays",
    "offers",
    "orders",
    "mentions",
    "disclaims",
    "cuts",
    "drinks",
    "stabs",
    "manipulates",
    "sits",
    "stands",
    "pledges",
    "lives",
    "climbs",
    "robs",
    "drops",
    "departs",
    "resides",
    "wakes",
    "tells",
    "connects",
    "baits",
    "attends",
    "proves",
    "explains",
    "speaks",
    "reverts",
    "transitions",
    "proposes",
    "earns",
    "wishes",
    "commits",
    "accuses",
    "fails",
    "exercises",
    "retrieves",
    "recounts",
    "feels",
    "dances",
    "distinguishes",
    "reassures",
    "hosts",
    "picks",
    "admonishes",
    "dies",
    "walks",
    "undergoes",
    "forgets",
    "puts",
    "helps",
    "announces",
    "succumbs",
    "tricks",
    "pins",
    "congratulates",
    "works",
    "collapses",
    "designs",
    "forces",
    "cries",
    "retreats",
    "abandons",
    "falls",
    "shares",
    "supports",
    "describes",
    "recovers",
    "regards",
    "leads",
    "crawls",
    "demonstrates",
    "prepares",
    "vows",
    "tears",
    "slashes",
    "assaults",
    "demands",
    "plants",
    "accounts",
    "maneuvers",
    "hangs",
    "listens",
    "raises",
    "possesses",
    "sees",
    "remarks",
    "uses",
    "retires",
    "spends",
    "shows",
    "escapes",
    "arrives",
    "grows",
    "realises",
    "delivers",
    "begins",
    "breaks",
    "reveals",
    "slips",
    "loves",
    "lodges",
    "proclaims",
    "bumps",
    "bites",
    "states",
]

pronoun_map = {
    "he": "they",
    "she": "they",
    "him": "them",
    "her": "them",
    "his": "their",
    "hers": "theirs",
    "He": "They",
    "She": "They",
    "Him": "Them",
    "Her": "Them",
    "His": "Their",
    "Hers": "Theirs",
}

MALE_REPLACEMENTS = {
    "POSSESSIVE": "his",
    "SUBJ_PRONOUN": "he",
    "OBJECT_PRONOUN": "him",
}

FEMALE_REPLACEMENTS = {
    "POSSESSIVE": "her",
    "SUBJ_PRONOUN": "she",
    "OBJECT_PRONOUN": "her",
}


class TAGS(enum.Enum):
    name_female = 1
    name_male = 2
    surname = 3
    surname_pl = 4
    name = 5

    @staticmethod
    def is_first_name_tag(tag: int) -> bool:
        return tag == TAGS.name_female.value or tag == TAGS.name_male.value

    @staticmethod
    def is_surname_tag(tag: int) -> bool:
        return tag == TAGS.surname.value or tag == TAGS.surname_pl.value


def is_punctuation(word: str) -> bool:
    if not word:
        return False

    word = word[-1]
    return word in string.punctuation


def get_pos(word):
    if not word:
        return ""

    word_tokenized = word_tokenize(text=word)
    pos = pos_tag(word_tokenized)[0][1]
    return pos


def is_verb(word: str) -> bool:
    if word in verb_list:
        return True

    pos = get_pos(word)
    # Verb tags in NLTK include 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ'
    return pos.startswith("VB")


def is_adjective(word: str) -> bool:
    pos = get_pos(word)
    # Adjective tags in NLTK include 'JJ', 'JJR', 'JJS'
    return pos.startswith("JJ")


def is_adverb(word: str) -> bool:
    pos = get_pos(word)
    # Adverb tags in NLTK include 'RB', 'RBR', 'RBS'
    return pos.startswith("RB")


def is_preposition(word: str) -> bool:
    pos = get_pos(word)
    # Preposition tags in NLTK include 'IN'
    return pos == "IN"
